!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)}(function(e){"use strict";e.defineMode("coq",function(e,t){var n={};function r(e,t){if(e.eatSpace())return null;var r=e.next();if(t.begin_sentence&&/[-*+{}]/.test(r))return"coq-bullet";if("("===r)return"*"===e.peek()?(e.next(),t.commentLevel++,t.tokenize=o,t.tokenize(e,t)):(t.begin_sentence=!1,"parenthesis");if(/\s/.test(r)||(t.begin_sentence=!1),"."===r)return"."!==e.peek()?(t.tokenize=a,t.tokenize(e,t)):(e.next(),"operator");if('"'===r)return t.tokenize=i,t.tokenize(e,t);if(")"===r)return"parenthesis";if("~"===r)return e.eatWhile(/\w/),"variable-2";if("`"===r)return e.eatWhile(/\w/),"quote";if(/\d/.test(r))return e.eatWhile(/[\d]/),"number";if(/[+\-*&%=<>!?|]/.test(r))return"operator";if(/[\[\]]/.test(r))return"bracket";e.eatWhile(/\w/);var c=e.current();return n.hasOwnProperty(c)?n[c]:"variable"}function i(e,t){for(var n,i=!1,o=!1;null!=(n=e.next());){if('"'===n&&!o){i=!0;break}o=!o&&"\\"===n}return i&&!o&&(t.tokenize=r),"string"}function o(e,t){for(var n;t.commentLevel&&(n=e.next());)"("===n&&"*"===e.peek()&&(e.next(),t.commentLevel++),"*"===n&&")"===e.peek()&&(e.next(),t.commentLevel--);return t.commentLevel||(t.tokenize=r),"comment"}function a(e,t){if(t.tokenize=r,e.eol()||e.match(/\s/,!1))return t.begin_sentence=!0,"statementend"}return["as","at","cofix","crush","else","end","False","fix","for","forall","fun","if","in","is","let","match","of","Prop","return","struct","then","True","Type","when","with"].map(function(e){n[e]="keyword"}),["admit","Admitted"].map(function(e){n[e]="keyword"}),["Abort","About","Add","All","Arguments","Asymmetric","Axiom","Bind","Canonical","Check","Class","Close","Coercion","CoFixpoint","Comments","CoInductive","Context","Constructors","Contextual","Corollary","Defined","Definition","Delimit","Fail","Eval","End","Example","Export","Fact","Fixpoint","From","Global","Goal","Graph","Hint","Hypotheses","Hypothesis","Implicit","Implicits","Import","Inductive","Infix","Instance","Lemma","Let","Local","Ltac","Module","Morphism","Next","Notation","Obligation","Open","Parameter","Parameters","Prenex","Print","Printing","Program","Patterns","Projections","Proof","Proposition","Qed","Record","Relation","Remark","Require","Reserved","Resolve","Rewrite","Save","Scope","Search","SearchAbout","Section","Set","Show","Strict","Structure","Tactic","Time","Theorem","Types","Unset","Variable","Variables","View"].map(function(e){n[e]="builtin"}),["after","apply","assert","auto","autorewrite","case","change","clear","compute","congruence","constructor","congr","cut","cutrewrite","dependent","destruct","eapply","eassumption","eauto","econstructor","elim","exists","field","firstorder","fold","fourier","generalize","have","hnf","induction","injection","instantiate","intro","intros","inversion","left","move","pattern","pose","refine","remember","rename","replace","revert","rewrite","right","ring","set","simpl","specialize","split","subst","suff","symmetry","transitivity","trivial","unfold","unlock","using","vm_compute","where","wlog"].map(function(e){n[e]="tactic"}),["assumption","by","contradiction","discriminate","exact","now","omega","reflexivity","tauto"].map(function(e){n[e]="terminator"}),{startState:function(){return{begin_sentence:!0,tokenize:r,commentLevel:0}},token:function(e,t){return t.tokenize(e,t)},blockCommentStart:"(*",blockCommentEnd:"*)",lineComment:null}}),e.defineMIME("text/x-coq",{name:"coq"})});