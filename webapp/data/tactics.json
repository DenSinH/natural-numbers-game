{
    "tactics": [
        {
            "name": "reflexivity",
            "description": "Solves the goal if it is a trivial equality.",
            "example": "Theorem ft : 41 + 1 = 42.\nProof.\n  reflexivity."
        },
        {
            "name": "rewrite",
            "description": "Given some known equality `a = b`, the rewrite tactic lets you replace `a` with `b` or vice versa in a goal or hypothesis"
        },
        {
            "name": "induction",
            "description": "Perform induction over some `n : mynat` in our assumptions."
        }
    ],
    "extra_theorems": [
        [
            {
                "name": "add_zero",
                "statement": "Fact add_zero (n : mynat) : n + 0 = n."
            },
            {
                "name": "add_succ",
                "statement": "Fact add_succ (m n : mynat) : n + (S m) = S (n + m)."
            }
        ],
        [
            {
                "name": "add_zero",
                "statement": "Fact add_zero (n : mynat) : n + 0 = n."
            },
            {
                "name": "add_succ",
                "statement": "Fact add_succ (m n : mynat) : n + (S m) = S (n + m)."
            },
            {
                "name": "one_eq_succ_zero",
                "statement": "Fact one_eq_succ_zero : 1 = S 0."
            }
        ],
        [
            {
                "name": "mul_zero",
                "statement": "Fact mul_zero (a : mynat) : a * 0 = 0."
            },
            {
                "name": "mul_succ",
                "statement": "Fact mul_succ (a b : mynat) : a * S b = a * b + a."
            }
        ],
        [
            {
                "name": "pow_zero",
                "statement": "Fact pow_zero (a : mynat) : a ^ 0 = 1."
            },
            {
                "name": "pow_succ",
                "statement": "Fact pow_succ (a b : mynat) : a ^ S b = a ^ b * a."
            },
            {
                "name": "two_eq_succ_one",
                "statement": "Fact two_eq_succ_one : 2 = S 1."
            }
        ],
        [],
        [],
        [],
        [
            {
                "name": "succ_inj",
                "statement": "Fact succ_inj {a b : mynat} : S a = S b -> a = b."
            },
            {
                "name": "zero_ne_succ",
                "statement": "Fact zero_ne_succ (a : mynat) : 0 <> S a."
            }
        ],
        [],
        [
            {
                "name": "le_iff_exists_add",
                "statement": "Fact le_iff_exists_add (a b : mynat) : a <= b <-> exists (c : mynat), b = a + c."
            }
        ]
    ]
}